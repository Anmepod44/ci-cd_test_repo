name: Deploy to ECS with CodeDeploy via Docker Hub

on:
  push:
    branches:
      - main  # Trigger on push to main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-west-2
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      CODEDEPLOY_DEPLOYMENT_GROUP: "frontend-deploy-group"
      CODE_DEPLOY_APPLICATION: "frontend-deploy"
      DOCKER_REPOSITORY: "nyarangamarvin545/trial"
      ECS_CLUSTER_NAME: "application_cluster"
      ECS_SERVICE_NAME: "frontend"
      IMAGE_TAG: ${{ github.sha }}
      S3_BUCKET: "deployment-bckt"

    steps:
    - name: Checkout source code
      uses: actions/checkout@v2

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }} .

    - name: Push Docker image to Docker Hub
      run: |
        docker tag ${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }} ${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }}
        docker push ${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }}

    - name: Create AppSpec and Task Definition files
      run: |
        echo "
        version: 0.0
        Resources:
          - TargetService:
              Type: AWS::ECS::Service
              Properties:
                TaskDefinition: arn:aws:ecs:us-west-2:${{ secrets.AWS_ACCOUNT_ID }}:task-definition/${{ env.ECS_SERVICE_NAME }}
                LoadBalancerInfo:
                  ContainerName: app
                  ContainerPort: 80
        " > appspec.yaml

        echo "
        {
          \"family\": \"${{ env.ECS_SERVICE_NAME }}\",
          \"containerDefinitions\": [
            {
              \"name\": \"app\",
              \"image\": \"${{ env.DOCKER_REPOSITORY }}:${{ env.IMAGE_TAG }}\",
              \"cpu\": 256,
              \"memory\": 512,
              \"essential\": true,
              \"portMappings\": [
                {
                  \"containerPort\": 80,
                  \"hostPort\": 80
                }
              ]
            }
          ]
        }
        " > taskdef.json

    - name: Register Task Definition
      run: |
        aws ecs register-task-definition --cli-input-json file://taskdef.json --region us-west-2

    - name: Upload AppSpec file to S3
      run: |
        aws s3 cp appspec.yaml s3://${{ env.S3_BUCKET }}/appspec.yaml --region us-west-2

    - name: Create Deployment
      id: create_deployment
      run: |
        DEPLOYMENT_ID=$(aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION }} \
          --deployment-group-name ${{ env.CODEDEPLOY_DEPLOYMENT_GROUP }} \
          --revision revisionType=S3,s3Location={bucket=${{ env.S3_BUCKET }},key=appspec.yaml,bundleType=YAML} \
          --region us-west-2 \
          --query 'deploymentId' \
          --output text)
        echo "::set-output name=deployment_id::$DEPLOYMENT_ID"

    - name: Wait for Deployment Completion
      run: |
        aws deploy wait deployment-successful \
          --deployment-id ${{ steps.create_deployment.outputs.deployment_id }} \
          --region us-west-2
